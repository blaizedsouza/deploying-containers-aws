---
AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS service and task"

Parameters:
  NetworkStack:
    Type: String
    Description: "Specify the network stack that created the VPC"
  ClusterName:
    Type: String
    Description: "Specify which ECS cluster the service belongs to"
  AlbStack:
    Type: String
    Description: "Specify name of the CloudFormation stack for ALB"

Resources:

  # grant the TASK (collection of containers) the ability to perform its job
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # create a group in CloudWatch logs for the app to write to
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /microservices/messages

  # create a security group for the messages Service
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "service-messages"
      GroupDescription: !Ref "AWS::StackName"
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcId
      Tags:
        - Key: Cluster
          Value: !Ref ClusterName

  ServiceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ServiceSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1" # allow all traffic outbound

  ServiceSecurityGroupIngressAllowTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ServiceSecurityGroup
      CidrIp:
        Fn::ImportValue:
          !Sub ${NetworkStack}-VpcCidr
      IpProtocol: "tcp"
      FromPort: 80 
      ToPort: 80



  # create the service that will maintain our containers for this microservice
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: messages
      Cluster: !Ref ClusterName
      DesiredCount: 3
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
             - Ref: ServiceSecurityGroup
          Subnets:
            - Fn::ImportValue:
               !Sub ${NetworkStack}-SubnetNodesAId
            - Fn::ImportValue:
               !Sub ${NetworkStack}-SubnetNodesBId
            - Fn::ImportValue:
               !Sub ${NetworkStack}-SubnetNodesCId

      LoadBalancers:
        - ContainerName: messages
          ContainerPort: 80
          TargetGroupArn:
            Fn::ImportValue:
              !Sub ${AlbStack}-TargetGroupForServiceMessages

  # define the collection of containers and cpu/memory/volume requirements
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: messages
      RequiresCompatibilities:
        - FARGATE
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: messages
          Image: nginxdemos/hello # start with a ready made image and update once ImageRepo has an image
          Environment:
            - Name: SERVICE
              Value: messages
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
